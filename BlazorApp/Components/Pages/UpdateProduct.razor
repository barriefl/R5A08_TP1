@page "/update-product/{id:int}"
@using BlazorApp.Models
@using BlazorApp.ViewModels
@inject UpdateProductViewModel ViewModel
@inject NavigationManager Navigation

<PageTitle>Update a product</PageTitle>

<h1>Update a product</h1>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<EditForm Model="@ViewModel" OnValidSubmit="OnSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3" hidden>Id:</div>
    <div class="mb-3">
        <NumberInput @bind-Value="@ViewModel.IdProduct" Placeholder="Id" Disabled=true hidden/>
    </div>

    <div class="mb-3">Name:</div>
    <div class="mb-3">
        <TextInput @bind-Value="@ViewModel.NameProduct" Placeholder="Name" />
    </div>

    <div class="mb-3">Description:</div>
    <div class="mb-3">
        <TextInput @bind-Value="@ViewModel.Description" Placeholder="Description" />
    </div>

    <div class="mb-3">Brand:</div>
    <div class="mb-3">
        <TextInput @bind-Value="@ViewModel.NameBrand" Placeholder="Brand" />
    </div>

    <div class="mb-3">Product Type:</div>
    <div class="mb-3">
        <TextInput @bind-Value="@ViewModel.NameProductType" Placeholder="Product Type" />
    </div>

    <div class="mb-3">Photo Name:</div>
    <div class="mb-3">
        <TextInput @bind-Value="@ViewModel.PhotoName" Placeholder="Photo Name" />
    </div>

    <div class="mb-3">Uri Photo:</div>
    <div class="mb-3">
        <TextInput @bind-Value="@ViewModel.UriPhoto" Placeholder="Uri Photo" />
    </div>

    <div class="mb-3">Real Stock:</div>
    <div class="mb-3">
        <NumberInput @bind-Value="@ViewModel.RealStock" Placeholder="Real Stock" />
    </div>

    <div class="mb-3">Min Stock:</div>
    <div class="mb-3">
        <NumberInput @bind-Value="@ViewModel.MinStock" Placeholder="Min Stock" />
    </div>

    <div class="mb-3">Max Stock:</div>
    <div class="mb-3">
        <NumberInput @bind-Value="@ViewModel.MaxStock" Placeholder="Max Stock" />
    </div>

    <Button Color="ButtonColor.Primary" @onclick="OnSubmitAsync"> Update </Button>
    <Button Color="ButtonColor.Secondary" @onclick="ClearForm"> Clear Form </Button>
</EditForm>

@code {
    List<ToastMessage> messages = new List<ToastMessage>();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadProductAsync(id);
    }

    private async Task OnSubmitAsync()
    {
        int idProduct = ViewModel.IdProduct;
        bool success = await ViewModel.UpdateProductAsync(idProduct);

        if (success)
        {
            AddToastMessage(ToastType.Success, "Product updated.", "Product updated with success !");
        }
        else
        {
            AddToastMessage(ToastType.Danger, "Error.", "Failed to update the product.");
        }
    }

    private void AddToastMessage(ToastType type, string title, string message)
    {
        messages.Add(new ToastMessage
        {
            Type = type,
            Title = title,
            Message = message
        });

        StateHasChanged();
    }

    private void ClearForm()
    {
        ViewModel.ClearForm();
        StateHasChanged();
    }
}
