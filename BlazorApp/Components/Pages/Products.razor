@page "/products"
@using BlazorApp.ViewModels
@using BlazorApp.Models
@inject ProductsViewModel ViewModel
@inject NavigationManager Navigation

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@if (ViewModel.IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <ConfirmDialog @ref="dialog" />

    <div class="row">
        <div class="col-md-5 col-sm-12">
            <AutoComplete @bind-Value="ViewModel.SelectedProductName"
                          TItem="Product"
                          DataProvider="ProductsDataProvider"
                          PropertyName="NameProduct"
                          Placeholder="Search a product..."
                          OnChanged="OnAutoCompleteChanged" />
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Brand</th>
                <th>Product type</th>
                <th>Update</th>
                <th>Delete</th>   
            </tr>
        </thead>
        <tbody>
            @foreach (var product in ViewModel.Products)
            {
                <tr>
                    <td>@product.NameProduct</td>
                    <td>@product.NameBrand</td>
                    <td>@product.NameProductType</td>
                    <td><Button Color="ButtonColor.Secondary" @onclick="() => OnUpdateClick(product.IdProduct)"> Update </Button></td>
                    <td><Button Color="ButtonColor.Danger" @onclick="() => ShowConfirmationAsync(product.IdProduct)"> Delete </Button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<ToastMessage> messages = new List<ToastMessage>();

    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private void OnUpdateClick(int id)
    {
        Navigation.NavigateTo($"/update-product/{id}");
    }

    private async Task ShowConfirmationAsync(int id)
    {
        bool confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this product ?",
            message1: "This will delete the product. Once deleted can not be rolled back.",
            message2: "Do you want to proceed ?");

        if (confirmation)
        {
            bool success = await ViewModel.DeleteProductAsync(id);

            if (success)
            {
                AddToastMessage(ToastType.Success, "Product deleted.", "Product deleted with success !");
            }
            else
            {
                AddToastMessage(ToastType.Danger, "Error.", "Failed to delete the product.");
            }
        }
    }

    private void AddToastMessage(ToastType type, string title, string message)
    {
        messages.Add(new ToastMessage
        {
            Type = type,
            Title = title,
            Message = message
        });

        StateHasChanged();
    }

    private async Task<AutoCompleteDataProviderResult<Product>> ProductsDataProvider(AutoCompleteDataProviderRequest<Product> request)
    {
        var products = await ViewModel.GetProductsByNameAsync(request.Filter.Value);
        return new AutoCompleteDataProviderResult<Product>
        {
            Data = products,
            TotalCount = products.Count()
        };
    }

    private async Task OnAutoCompleteChanged(Product selected)
    {
        // Si champ vidé avec la croix
        if (selected is null || string.IsNullOrWhiteSpace(ViewModel.SelectedProductName))
        {
            ViewModel.SelectedProductName = null;

            // ⏳ petit délai avant StateHasChanged pour laisser AutoComplete finir son JS
            await Task.Delay(100);

            await ViewModel.LoadDataAsync();
            StateHasChanged();
            return;
        }

        // Si un produit est sélectionné
        await ViewModel.FilterProductsByNameAsync(selected.NameProduct);
        StateHasChanged();
    }
}
